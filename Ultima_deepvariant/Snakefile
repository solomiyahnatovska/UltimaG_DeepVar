#configfile: "/home/hnatovs1/scratch/Ultima_deepvariant/cluster.yaml"
from pathlib import Path

# defining the paths:
project_dir = Path('/home/hnatovs1/scratch/Ultima_deepvariant')
intermediate_data_dir = project_dir.joinpath("intermediate_outputs")
data_dir = project_dir.joinpath("test_data")
scripts_dir = project_dir.joinpath("scripts_eDV")
log_dir = project_dir.joinpath("logs")
config_dir = project_dir.joinpath("configs")

rule all: 
    input:
        project_dir.joinpath("postprocess_output")
rule make_intervals: # This rule runs the make intervals script which only needs to be run once for the reference version (hg38 in this case) -not a sample specific step
    input:
        interval_list=data_dir.joinpath('wgs_calling_regions.hg38.interval_list')
    output:
        interval_beds=expand(str(intermediate_data_dir.joinpath("bedfiles/temp_{i:04d}_of_40.bed")), i=range(1,41))
    params:
        script=scripts_dir.joinpath("make_intervals.sh"),
        outdir=intermediate_data_dir.joinpath("bedfiles")
    log:
        log_dir.joinpath("efficient_DV_ultimaG_make_intervals.txt")
    shell:
        "{params.script} -i {input.interval_list} -o {params.outdir} &> {log}"
rule make_examples: # This rule encorporates the sample cram and index files and uses each the 40 interval bedfiles to identify potential variants
    input:
        interval_beds=rules.make_intervals.output.interval_beds,
        cram_file=data_dir.joinpath("ultima-GIAB/Crams/414004-L7384-Z0008-CACATCCTGCATGTGAT.cram"),
        cram_index=data_dir.joinpath("ultima-GIAB/Crams/414004-L7384-Z0008-CACATCCTGCATGTGAT.cram.crai")
#        cram_file='/home/hnatovs1/scratch/test_data/sample.chr1.5M.cram',
#        cram_index='/home/hnatovs1/scratch/test_data/sample.chr1.5M.cram.crai'
    output:
        example_beds=expand(str(intermediate_data_dir.joinpath("bedfiles/temp_{i:04d}_of_40.bed.out.tfrecord.gz")), i=range(1,41))
    log:
        log_dir.joinpath("efficient_DV_ultimaG_make_examples.txt")
    params:
        script=scripts_dir.joinpath("make_examples.sh"),
        outdir=intermediate_data_dir.joinpath("example_files")
    shell:
       "{params.script} -c {input.cram_file} -d {input.cram_index} -i {input.interval_beds} -o {params.outdir} &> {log}"
rule generate_config: # Generates the configuration file, incorporating all the examples generated across all the bedfiles
    input:
        example_beds=rules.make_examples.output.example_beds
    output:
        config=config_dir.joinpath("call_variants.ini")
    params:
        outputFileName=intermediate_data_dir.joinpath("call_variants_output/call_variants"),
        log_dir=intermediate_data_dir.joinpath("call_variants_output")
    shell:
        """
        mkdir -p configs

        TFRECORDS=({input.example_beds})  # store array of files
        NUM_FILES=${{#TFRECORDS[@]}}    # count the files
        
        cat > {output.config} <<EOF
[RT classification]
onnxFileName = /scratch/hnatovs1/test_data/ultima-usb4-pe-germline-model-v1.5.ckpt-380000.onnx
useSerializedModel = 1
trtWorkspaceSizeMB = 2000
numInferTreadsPerGpu = 2
useGPUs = 1
gpuid = 0
[debug]
logFileFolder = {params.log_dir}
[general]
tfrecord = 1
compsed = 1
outputInOneFile = 0
numUncomprThreads = 8
uncomprBufSizeGB = 1
outputFileName = {params.outputFileName}
numConversionThreads = 2
numExampleFiles = $NUM_FILES
EOF
        
        # Add each file in one loop
        for i in "${{!TFRECORDS[@]}}"; do
            echo "exampleFile$((i+1)) = ${{TFRECORDS[$i]}}" >> {output.config}
        done
        """

rule call_variants:
    input:
        example_beds=rules.make_examples.output.example_beds,
        config=rules.generate_config.output.config
    output:
        call_vars_outdir=intermediate_data_dir.joinpath("call_variants_output")
    params:
        script=scripts_dir.joinpath("call_variants.sh")
    log:
        log_dir.joinpath("efficient_DV_ultimaG_call_variants.txt")
    shell:
       "params.script &> {log}"

rule post_process:
    input:
        call_vars_outdir=rules.call_variants.output.call_vars_outdir
    output:
        postprocess_output=project_dir.joinpath("postprocess_output")
    params:
        script=scripts_dir.joinpath("post_process.sh")
    log:
        log_dir.joinpath("efficient_DV_ultimaG_post_process.txt")
    shell:
        "params.script &> {log}"
            
# 